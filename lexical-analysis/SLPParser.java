/* SLPParser.java */
/* Generated By:JavaCC: Do not edit this line. SLPParser.java */
  public class SLPParser implements SLPParserConstants {
    //Parser execution
    public static void main ( String args [ ] ) {

      //Parser initialization
      SLPParser parser;

      // Use console input rather than a file stream
      if(args.length == 0){
        System.out.println ("SLPParser: Reading input ...");
        parser = new SLPParser(System.in);
      }
      //File Stream input
      else if(args.length == 1){
        System.out.println ("" );
        System.out.println ("SLPParser: Reading the file " + args[0] + " ..." );
        System.out.println ("" );
        try {
          parser = new SLPParser(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("SLPParser: The file " + args[0] + " was not found.");
          return;
        }
      }
      else {
        System.out.println ("SLPParser:  You must use one of the following:");
        System.out.println ("         java SLPParser < file");
        System.out.println ("Or");
        System.out.println ("         java SLPParser file");
        return ;
      }
      try {

      /* Used for testing the Lexemes:
         for (Token t = getNextToken(); t.kind!=EOF; t = getNextToken()) {
            if(t.kind == NUM){
                System.out.print("NUM");
                System.out.print("("+t.image+") ");
            }
            else if (t.kind==ID){
                System.out.print("ID " + "(" + t.image + ")");
            }
            else
                System.out.print(t.image+" ");
       */
      parser.start();
        System.out.println ("" );
        System.out.println ("SLPParser: The input was read sucessfully.");
        System.out.println ("" );
      }
      catch(ParseException e){
        System.out.println ("SLPParser: There was an error during the parse.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("SLPParser: There was an error.");
        System.out.println (e.getMessage());
      }
    }

//MAIN UNIT
  static final public 
void start() throws ParseException {
    prog();
    jj_consume_token(0);
  }

  static final public void prog() throws ParseException {
    dec_list();
    function_list();
    main();
  }

  static final public void dec_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case CONST:{
      decl();
      jj_consume_token(SEMIC);
      dec_list();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      var_decl();
      break;
      }
    case CONST:{
      const_decl();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(ID);
    jj_consume_token(COLON);
    type();
  }

  static final public void const_decl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(ID);
    jj_consume_token(COLON);
    type();
    jj_consume_token(ASSIGN);
    expression();
  }

  static final public void function_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case INTEGER:
    case VOID:{
      function();
      function_list();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void function() throws ParseException {
    type();
    jj_consume_token(ID);
    jj_consume_token(LBR);
    parameter_list();
    jj_consume_token(RBR);
    jj_consume_token(IS);
    dec_list();
    jj_consume_token(BEGIN);
    statement_block();
    jj_consume_token(RETURN);
    jj_consume_token(LBR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBR:
    case MINUS_SIGN:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:{
      expression();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RBR);
    jj_consume_token(SEMIC);
    jj_consume_token(END);
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parameter_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      nemp_parameter_list();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void nemp_parameter_list() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(COLON);
    type();
    nemp_parameter_list_prime();
  }

  static final public void nemp_parameter_list_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      nemp_parameter_list();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(BEGIN);
    dec_list();
    statement_block();
    jj_consume_token(END);
  }

  static final public void statement_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WHILE:
    case BEGIN:
    case SKIP_TOKEN:
    case ID:{
      statement();
      statement_block();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      statement_prime();
      break;
      }
    case BEGIN:{
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      condition();
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
      jj_consume_token(ELSE);
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
      break;
      }
    case SKIP_TOKEN:{
      jj_consume_token(SKIP_TOKEN);
      jj_consume_token(SEMIC);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void statement_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      expression();
      jj_consume_token(SEMIC);
      break;
      }
    case LBR:{
      jj_consume_token(LBR);
      arg_list();
      jj_consume_token(RBR);
      jj_consume_token(SEMIC);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS_SIGN:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:{
      fragment();
      expr_bin_op();
      break;
      }
    case LBR:{
      jj_consume_token(LBR);
      expression();
      jj_consume_token(RBR);
      expr_bin_op();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expr_bin_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:{
      binary_arith_op();
      expression();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void binary_arith_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_SIGN:{
      jj_consume_token(PLUS_SIGN);
      break;
      }
    case MINUS_SIGN:{
      jj_consume_token(MINUS_SIGN);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS_SIGN:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS_SIGN:{
        jj_consume_token(MINUS_SIGN);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBR:
      case ID:{
        arg_list();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
      }
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    case TRUE:
    case FALSE:{
      bool_tf();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void bool_tf() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      condition();
      break;
      }
    case MINUS_SIGN:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:{
      condition_prime();
      bool_cond();
      break;
      }
    case LBR:{
      jj_consume_token(LBR);
      condition();
      jj_consume_token(RBR);
      bool_cond();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition_prime() throws ParseException {
    fragment();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOL_EQ:
    case NOT_EQ:
    case LT:
    case LT_EQ:
    case GT:
    case GT_EQ:{
      comp_op();
      condition_prime();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void bool_cond() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR_OP:
    case AND_OP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND_OP:{
        jj_consume_token(AND_OP);
        break;
        }
      case OR_OP:{
        bool_cond_prime();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      condition();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void bool_cond_prime() throws ParseException {
    jj_consume_token(OR_OP);
  }

  static final public void comp_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LT:{
      jj_consume_token(LT);
      break;
      }
    case LT_EQ:{
      jj_consume_token(LT_EQ);
      break;
      }
    case GT:{
      jj_consume_token(GT);
      break;
      }
    case GT_EQ:{
      jj_consume_token(GT_EQ);
      break;
      }
    case BOOL_EQ:
    case NOT_EQ:{
      comp_op_prime();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comp_op_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOL_EQ:{
      jj_consume_token(BOOL_EQ);
      break;
      }
    case NOT_EQ:{
      jj_consume_token(NOT_EQ);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arg_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBR:{
      jj_consume_token(LBR);
      nemp_arg_list();
      jj_consume_token(RBR);
      break;
      }
    case ID:{
      nemp_arg_list();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void nemp_arg_list() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      nemp_arg_list();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SLPParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30000000,0x30000000,0x0,0x24000,0x0,0x0,0x400,0x88000000,0x88000000,0x6000,0x24000,0x30000,0x30000,0x20000,0x4000,0x20000,0x0,0x64000,0x7e00000,0x180000,0x180000,0x7e00000,0x600000,0x4000,0x400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x70,0x4806,0x70,0x4000,0x0,0x4500,0x4500,0x0,0x4806,0x0,0x0,0x0,0x4000,0x4806,0x6,0x4806,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,};
   }

  /** Constructor with InputStream. */
  public SLPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SLPParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SLPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SLPParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SLPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SLPParser(SLPParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SLPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  }
