options {
    IGNORE_CASE = true;
    //JAVA_UNICODE_ESCAPE = true;
    DEBUG_TOKEN_MANAGER = false;
    VISITOR = true;
    MULTI = true;
    NODE_DEFAULT_VOID = true;
    //NODE_SCOPE_HOOK=true;
}
PARSER_BEGIN(ASTTest)
    import java.util.*;
    public class ASTTest {
    public static String scope = "global";
    public static ASTSymbolTable st = new ASTSymbolTable();
    //Parser execution

    public static void main ( String args [ ] ) {

      //Parser initialization

      ASTTest parser;

      // Use console input rather than a file stream
      if(args.length == 0){
        System.out.println ("SLPParser: Reading input ...");
        parser = new ASTTest(System.in);
      }
      //File Stream input
      else if(args.length == 1){
        System.out.println ("" );
        System.out.println ("SLPParser: Reading the file " + args[0] + " ..." );
        System.out.println ("" );
        try {
          System.out.println("AST: ");
          parser = new ASTTest(new java.io.FileInputStream(args[0]));
          SimpleNode root = parser.prog();
          root.dump("");

          System.out.println("Symbol Table");
          st.print();

          System.out.println("\n\nType Checking");
          System.out.println("--------------------");
          ASTVisitor visitor = new ASTVisitor();
          root.jjtAccept(visitor, st);

          System.out.println("\n\nThree Address Code Generation");
          System.out.println("--------------------");
          ThreeAddrCode prettyPrint = new ThreeAddrCode();
          root.jjtAccept(prettyPrint, null);
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("SLPParser: The file " + args[0] + " was not found.");
          return;
        }
        catch(ParseException e){
          System.out.println ("SLPParser: There was an error during the parse.");
          System.out.println (e.getMessage());
        }
      }
      else {
        System.out.println ("SLPParser:  You must use one of the following:");
        System.out.println ("         java SLPParser < file");
        System.out.println ("Or");
        System.out.println ("         java SLPParser file");
        return ;
      }
      try {
        System.out.println("" );
        System.out.println ("SLPParser: The input was read sucessfully.");
        System.out.println ("" );
      }
      catch(TokenMgrError e){
        System.out.println ("SLPParser: There was an error.");
        System.out.println (e.getMessage());
      }
    }
    /*void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).setCoords( new SourceCoords( file, getToken(1).beginLine ) ) ;
    }
    void jjtreeCloseNodeScope(Node n) {
    }*/
  }
PARSER_END(ASTTest)


TOKEN_MGR_DECLS : {
    static int commentNesting = 0;
}

//STRUCTURES AND CHARACTERS TO SKIP
SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

SKIP : {
    "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "/*" { commentNesting++; }
    | "*/" { commentNesting--;
        if (commentNesting == 0)
            SwitchTo(DEFAULT);
    }
    | <~[]>
}

//Punctuation tokens
TOKEN: {
    <COMMA : "," >
|   <SEMIC : ";" >
|   <COLON : ":" >
|   <ASSIGN : "=" >
|   <LBR : "(" >
|   <RBR : ")" >
|   <PLUS_SIGN : "+" >
|   <MINUS_SIGN : "-" >
|   <NOT : "~" >
|   <OR_OP : "||" >
|   <AND_OP : "&&" >
|   <BOOL_EQ : "==" >
|   <NOT_EQ : "!=" >
|   <LT : "<" >
|   <LT_EQ : "<=" >
|   <GT : ">" >
|   <GT_EQ : ">=" >
}

//RESERVED WORDS
TOKEN : {
    <IF: "if">
|   <VAR: "var">
|   <CONST: "const">
|   <RETURN: "return">
|   <WHILE: "while">
|   <ELSE: "else">
|   <TRUE: "true">
|   <FALSE: "false">
|   <IS: "is">
|   <BOOLEAN: "boolean">
|   <INTEGER: "integer">
|   <VOID: "void">
|   <MAIN: "main">
|   <BEGIN: "begin">
|   <END: "end">
|   <SKIP_TOKEN: "skip">
}


TOKEN : {
    <NUM: <SIGNED>>
|   <#DIGIT: ["0" - "9"]>
|   <SIGNED: (["0"]) | ("-")? ["1" - "9"] (<DIGIT>)*>
|   <ID: <LETTER>(<LETTER>|<DIGIT>|"_")*>
|   <#LETTER: (["a"-"z","A"-"Z"])>
}

//MAIN UNIT

void start() : {}
{
    prog()
}

SimpleNode prog() #Program : {}
{
    dec_list() function_list() main() <EOF> {return jjtThis;}
}

void dec_list () : {}
{
    (decl() <SEMIC> dec_list())?
}

void decl () : {}
{
    var_decl() | const_decl()
}

void var_decl() #Var : {Token t; String id; String type;} //need to add scope
{
    t = <VAR> id = identifier() <COLON> type = type() {st.insert(id, "var", type, scope);}
}

String identifier() #identifier : {Token t;}
{
    t = <ID> {jjtThis.value = t.image; return t.image;}
}

void const_decl() #Const : {Token t; String id; String type;} //need to add scope
{
    t = <CONST> id = identifier() <COLON> type = type() assignment() {st.insert(id, "const",  type, scope);}
}

void assignment() : {Token t;}
{
    t = <ASSIGN> expression() {jjtThis.value = t.image;} #CONSTAssign(>1)
}

void function_list() : {}
{
    (function() function_list())?
}

void function() #Function : {String id; String type;}
{
    type = type() id = identifier() {st.insert(id, "function", type, scope); scope = id;} <LBR> parameter_list()<RBR> <IS>
    dec_list()
    <BEGIN>
    statement_block()
    (<RETURN> <LBR> (expression())? <RBR> <SEMIC>) #FuncReturn(0|1)
    <END>
}

String type() #Type : {Token t;}
{
    (t = <INTEGER> | t = <BOOLEAN> | t = <VOID>)
     {jjtThis.value = t.image; return t.image; }
}

void parameter_list() #Params : {}
{
    (nemp_parameter_list() nemp_parameter_list_prime())?
}

void nemp_parameter_list() #NEMP_PARAMS : {String id; String type;}
{
    (id = identifier() <COLON> type = type() {st.insert(id, "function parameter", type, scope);})
}

void nemp_parameter_list_prime() : {}
{
    (<COMMA> nemp_parameter_list())*
}

void main() #Main : {Token t;}
{
    {scope = "main";}
    t =
    <MAIN>
    <BEGIN>
    dec_list()
    statement_block()
    <END>
}

void statement_block() : {}
{
    (statement() statement_block())?
}

void statement() : {Token t;}
{
    (identifier() ((t = <ASSIGN> expression() <SEMIC> {jjtThis.value = t.image;}) | (<LBR> (arg_list())? <RBR> <SEMIC> {jjtThis.value = "proc";}))) #Assign(>1) |
    <BEGIN> statement_block() <END> |
    (t = <IF> condition() <BEGIN> statement_block() <END>
    <ELSE> <BEGIN> statement_block() <END>  {jjtThis.value = t.image;}) #Stm |
    (t = <WHILE> condition() <BEGIN> statement_block() <END> {jjtThis.value = t.image;}) #Stm |
    (<SKIP_TOKEN> <SEMIC>)
}

void expression() : {}
{
     (fragment() expr_bin_op())
     | (<LBR> expression() <RBR> expr_bin_op())
}

void expr_bin_op() : {Token t;}
{
    (t = <MINUS_SIGN> expression() {jjtThis.value = t.image;} #Minus_Op(2)
  | t = <PLUS_SIGN> expression() {jjtThis.value = t.image;} #Add_Op(2))?
}

void fragment() : {String t;}
{
  identifier()fragPrime()
  | <MINUS_SIGN> t = identifier() {jjtThis.value = t;} #Negate(1)
  | Num()
  | bool_tf()
}

void fragPrime() : {}
{
  (<LBR> arg_list() <RBR>)? #Args(>0)
}

void Num() #Num : {Token t;}
{
    t = <NUM> {jjtThis.value = t.image;}
}


void bool_tf() #Bool : {Token t;}
{
    (
    t = <TRUE> {jjtThis.value = t.image;}
    | t = <FALSE> {jjtThis.value = t.image;}
    )
}

void condition() : {}
{
    (<NOT> condition() bool_cond())
    | LOOKAHEAD(3) (<LBR> condition() <RBR> bool_cond())
    | (expression() comp_op() bool_cond())
}

void bool_cond() : {Token t;}
{
    (t = <OR_OP> condition() {jjtThis.value = t.image;}) #OR(2)
  | (t = <AND_OP> condition() {jjtThis.value = t.image;}) #AND(2)
  | {} //Question mark didn't seem to work here?
}

void comp_op() : {Token t;}
{
    t = <BOOL_EQ> expression() {jjtThis.value = t.image;} #EqOP(2)
  | t = <NOT_EQ> expression() {jjtThis.value = t.image;} #NotEqOP(2)
  | t = <LT> expression() {jjtThis.value = t.image;} #LessThanOP(2)
  | t = <LT_EQ> expression() {jjtThis.value = t.image;} #LessOrEqualOP(2)
  | t = <GT> expression() {jjtThis.value = t.image;} #GreaterThanOP(2)
  | t = <GT_EQ> expression() {jjtThis.value = t.image;} #GreaterOrEqualOP(2)
}

void arg_list() :{}
{
    (<LBR>nemp_arg_list()<RBR>) | (nemp_arg_list())
}

void nemp_arg_list() : {}
{
    identifier() (<COMMA> nemp_arg_list())? #ArgList(>1)
}






